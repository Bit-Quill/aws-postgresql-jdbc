name: 'Release Driver'

on:
  push:
    tags:
      - '*'

permissions:
  actions: write
  contents: write
  deployments: write
  packages: write
  pull-requests: write
  repository-projects: write

jobs:
  ubuntu-latest-build-and-release:
    name: 'Build and Release Driver'
    runs-on: ubuntu-latest
    steps:
    - name: 'Clone Repository'
      uses: actions/checkout@v2
      with:
        fetch-depth: 50
    - name: 'Start PostgreSQL'
      working-directory: docker
      # Use Postgres 13.4 Docker image as Aurora does not support Postgres 14 yet.
      run: PGV=13.4 docker-compose up -d
    - name: 'Set up JDK 8'
      uses: actions/setup-java@v1
      with:
        java-version: 8
    - name: 'Prepare ssltest.local.properties'
      run: echo enable_ssl_tests=true > ssltest.local.properties
    - name: 'Build and Test Driver'
      uses: burrunan/gradle-cache-action@v1
      env:
        S3_BUILD_CACHE_ACCESS_KEY_ID: ${{ secrets.S3_BUILD_CACHE_ACCESS_KEY_ID }}
        S3_BUILD_CACHE_SECRET_KEY: ${{ secrets.S3_BUILD_CACHE_SECRET_KEY }}
      with:
        job-id: jdk8
        arguments: --no-parallel --no-daemon jandex build
        properties: |
          skipReplicationTests=
          port=${{ job.services.postgres.ports['5432'] }}
    - name: 'Archive junit results'
      uses: actions/upload-artifact@v2
      with:
        name: junit-report
        path: pgjdbc/build/reports/tests/
    - name: 'Set Version Env Variable'
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
    - name: 'Get Release Details'
      run: |
        export RELEASE_DETAILS="$(awk -vN=2 'n<N;/^## /{++n}' CHANGELOG.md)"
        export RELEASE_DETAILS="$(sed '${/^# /d;}' <<< "$RELEASE_DETAILS")"
        export RELEASE_DETAILS="$(sed '$d' <<< "$RELEASE_DETAILS")"
        touch RELEASE_DETAILS.md
        echo "$RELEASE_DETAILS" > RELEASE_DETAILS.md
    - name: 'Install GPG Secret Key'
      id: install-secret-key
      run: |
        cat <(echo -e "${{ secrets.GPG_SECRET_KEY }}") | gpg --batch --import
    - name: 'Sign Jars'
      run: |
        export GPG_TTY=$(tty)
        for jar in pgjdbc/build/libs/*.jar; do gpg --detach-sign --armor $jar; done
    - name: 'Upload to Release'
      uses: ncipollo/release-action@v1
      with:
        draft: true
        name: "AWS JDBC Driver for PostgreSQL Public Preview - v${{ env.RELEASE_VERSION }}"
        bodyFile: RELEASE_DETAILS.md
        artifacts: pgjdbc/build/libs/*
        token: ${{ secrets.GITHUB_TOKEN }}
